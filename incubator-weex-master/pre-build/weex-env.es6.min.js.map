{"version":3,"file":"weex-env.es6.min.js","sources":["../runtime/shared/env/console.js","../runtime/shared/env/setTimeout.js","../runtime/shared/env/freeze.js","../runtime/entries/env.js"],"sourcesContent":["/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * @fileOverview\n * This file will hack `console` methods by `WXEnvironment.logLevel`.\n * So we can control how many and which messages will be sent by change the log level.\n * Additionally in native platform the message content must be primitive values and\n * using `nativeLog(...args, logLevelMark)` so we create a new `console` object in\n * global add a format process for its methods.\n */\n\nconst LEVELS = ['off', 'error', 'warn', 'info', 'log', 'debug']\nlet levelMap = {}\n\nconst originalConsole = global.console\n\n/**\n * Hack console for native environment.\n */\nexport function setNativeConsole () {\n  generateLevelMap()\n\n  /* istanbul ignore next */\n  // mock console in native environment\n  if (global.WXEnvironment && global.WXEnvironment.platform !== 'Web') {\n    global.console = {\n      debug: (...args) => {\n        if (checkLevel('debug')) { global.nativeLog(...format(args), '__DEBUG') }\n      },\n      log: (...args) => {\n        if (checkLevel('log')) { global.nativeLog(...format(args), '__LOG') }\n      },\n      info: (...args) => {\n        if (checkLevel('info')) { global.nativeLog(...format(args), '__INFO') }\n      },\n      warn: (...args) => {\n        if (checkLevel('warn')) { global.nativeLog(...format(args), '__WARN') }\n      },\n      error: (...args) => {\n        if (checkLevel('error')) { global.nativeLog(...format(args), '__ERROR') }\n      }\n    }\n  }\n\n  // Web or Node\n  else {\n    const { debug, log, info, warn, error } = console\n    console.__ori__ = { debug, log, info, warn, error }\n    console.debug = (...args) => {\n      if (checkLevel('debug')) { console.__ori__.debug.apply(console, args) }\n    }\n    console.log = (...args) => {\n      if (checkLevel('log')) { console.__ori__.log.apply(console, args) }\n    }\n    console.info = (...args) => {\n      if (checkLevel('info')) { console.__ori__.info.apply(console, args) }\n    }\n    console.warn = (...args) => {\n      if (checkLevel('warn')) { console.__ori__.warn.apply(console, args) }\n    }\n    console.error = (...args) => {\n      if (checkLevel('error')) { console.__ori__.error.apply(console, args) }\n    }\n  }\n}\n\n/**\n * Reset hacked console to original.\n */\n/* istanbul ignore next */\nexport function resetNativeConsole () {\n  levelMap = {}\n  global.console = originalConsole\n}\n\n/**\n * Generate map for which types of message will be sent in a certain message level\n * as the order of LEVELS.\n */\nfunction generateLevelMap () {\n  LEVELS.forEach(level => {\n    const levelIndex = LEVELS.indexOf(level)\n    levelMap[level] = {}\n    LEVELS.forEach(type => {\n      const typeIndex = LEVELS.indexOf(type)\n      if (typeIndex <= levelIndex) {\n        levelMap[level][type] = true\n      }\n    })\n  })\n}\n\n/**\n * Check if a certain type of message will be sent in current log level of env.\n * @param  {string} type\n * @return {boolean}\n */\nfunction checkLevel (type) {\n  const logLevel = (global.WXEnvironment && global.WXEnvironment.logLevel) || 'log'\n  return levelMap[logLevel] && levelMap[logLevel][type]\n}\n\n/**\n * Convert all log arguments into primitive values.\n * @param  {array} args\n * @return {array}\n */\n/* istanbul ignore next */\nfunction format (args) {\n  return args.map((v) => {\n    const type = Object.prototype.toString.call(v)\n    if (type.toLowerCase() === '[object object]') {\n      v = JSON.stringify(v)\n    }\n    else {\n      v = String(v)\n    }\n    return v\n  })\n}\n","/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * @fileOverview\n * Polyfill `setTimeout` on Android V8 using native method\n * `setTimeoutNative(callbackId, time)` and JS method\n * `setTimeoutCallback(callbackId)`.\n * This polyfill is only used in virtual-DOM diff & flush agorithm. Not\n * accessed by JS Bundle code (The timer APIs polyfill for JS Bundle is in\n * `html5/default/app/ctrl.js`).\n */\n\nconst originalSetTimeout = global.setTimeout\nconst setTimeoutNative = global.setTimeoutNative\n\n/**\n * Set up native timer\n */\n/* istanbul ignore next */\nexport function setNativeTimer () {\n  if (typeof setTimeout === 'undefined' &&\n  typeof setTimeoutNative === 'function') {\n    const timeoutMap = {}\n    let timeoutId = 0\n\n    global.setTimeout = (cb, time) => {\n      timeoutMap[++timeoutId] = cb\n      setTimeoutNative(timeoutId.toString(), time)\n    }\n\n    global.setTimeoutCallback = (id) => {\n      if (typeof timeoutMap[id] === 'function') {\n        timeoutMap[id]()\n        delete timeoutMap[id]\n      }\n    }\n  }\n}\n\n/* istanbul ignore next */\nexport function resetNativeTimer () {\n  global.setTimeout = originalSetTimeout\n  global.setTimeoutCallback = null\n}\n\nsetNativeTimer()\n","/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * Freeze the prototype of javascript build-in objects.\n */\n/* istanbul ignore next */\nexport function freezePrototype () {\n  Object.freeze(Object)\n  Object.freeze(Array)\n\n  // Object.freeze(Object.prototype)\n  freezeObjectProto()\n  Object.freeze(Array.prototype)\n  Object.freeze(String.prototype)\n  Object.freeze(Number.prototype)\n  Object.freeze(Boolean.prototype)\n\n  // Object.freeze(Error.prototype)\n  freezeErrorProto()\n  Object.freeze(Date.prototype)\n  Object.freeze(RegExp.prototype)\n}\n\nfunction freezeObjectProto () {\n  const proto = Object.prototype\n  const protoName = 'Object.prototype'\n  freezeProtoProperty(proto, '__defineGetter__', protoName)\n  freezeProtoProperty(proto, '__defineSetter__', protoName)\n  freezeProtoProperty(proto, '__lookupGetter__', protoName)\n  freezeProtoProperty(proto, '__lookupSetter__', protoName)\n  freezeProtoProperty(proto, 'constructor', protoName)\n  freezeProtoProperty(proto, 'hasOwnProperty', protoName)\n  freezeProtoProperty(proto, 'isPrototypeOf', protoName)\n  freezeProtoProperty(proto, 'propertyIsEnumerable', protoName)\n  freezeProtoProperty(proto, 'toLocaleString', protoName)\n  freezeProtoProperty(proto, 'toString', protoName)\n  freezeProtoProperty(proto, 'valueOf', protoName)\n  Object.seal(proto)\n}\n\nfunction freezeErrorProto () {\n  const proto = Error.prototype\n  const protoName = 'Error.prototype'\n  freezeProtoProperty(proto, 'name', protoName)\n  freezeProtoProperty(proto, 'message', protoName)\n  freezeProtoProperty(proto, 'toString', protoName)\n  freezeProtoProperty(proto, 'constructor', protoName)\n  Object.seal(proto)\n}\n\nfunction freezeProtoProperty (proto, propertyName, protoName) {\n  if (!proto.hasOwnProperty(propertyName)) {\n    return\n  }\n\n  const origin = proto[propertyName]\n  Object.defineProperty(proto, propertyName, {\n    get: function () {\n      return origin\n    },\n    set: function (value) {\n      if (this === proto) {\n        throw Error(`Cannot assign to read only property ${propertyName} of ${protoName}`)\n      }\n\n      Object.defineProperty(this, propertyName, {\n        value: value,\n        writable: true\n      })\n\n      return value\n    }\n  })\n}\n","/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { setNativeConsole, freezePrototype } from '../shared'\nexport * from '../shared'\n\nsetNativeConsole()\n\nif (process.env.WEEX_FREEZE) {\n  freezePrototype()\n}\n"],"names":["LEVELS","levelMap","originalConsole","global","console","setNativeConsole","forEach","level","levelIndex","indexOf","type","typeIndex","WXEnvironment","platform","debug","args","checkLevel","nativeLog","format","log","info","warn","error","__ori__","apply","logLevel","map","v","Object","prototype","toString","call","toLowerCase","JSON","stringify","String","originalSetTimeout","setTimeout","setTimeoutNative","setNativeTimer","timeoutMap","timeoutId","cb","time","setTimeoutCallback","id","freezePrototype","freeze","Array","proto","protoName","freezeProtoProperty","seal","freezeObjectProto","Number","Boolean","Error","freezeErrorProto","Date","RegExp","propertyName","hasOwnProperty","origin","defineProperty","get","set","value","this","writable"],"mappings":"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"}